{"version":3,"sources":["components/Navbar.js","pages/DashboardPage.js","components/Post.js","sagas/selectors.js","slices/utils/actionCreator.js","slices/posts.js","pages/PostsPage.js","customHooks/stateSelectors.js","slices/post.js","customHooks/usePost.js","slices/comments.js","components/Comment.js","customHooks/useComments.js","pages/SinglePostPage.js","App.js","slices/settings.js","slices/index.js","api/baseUrls.const.js","api/postsApi.js","sagas/postsSaga.js","api/settingsApi.js","sagas/convert/postSettings.js","sagas/settingsSaga.js","sagas/index.js","index.js"],"names":["Navbar","react_default","a","createElement","react_router_dom","to","DashboardPage","Post","_ref","post","excerpt","className","title","body","substring","concat","id","selectPosts","state","posts","selectPost","selectComments","stateOrFieldName","get","comments","getApiActionCreator","name","action","hasSuccess","hasError","act","Object","defineProperty","createAction","getActionCreator","postsSlice","createSlice","initialState","loading","errors","list","reducers","getPosts","getPostsSuccess","payload","getPostsError","postsActionCreator","postsActions","objectSpread2","PostsPage","dispatch","useDispatch","_usePostsSelector","useSelector","shallowEqual","useEffect","map","Post_Post","key","postSlice","data","getPost","getPostSuccess","getPostError","postActionCreator","postActions","usePost","_useParams$id","useParams","postId","_usePostSelector","postLoading","postErrors","renderPost","isEmpty","undefined","commentsSlice","getComments","getCommentsSuccess","getCommentsError","commentsActionCreator","commentsActions","Comment","comment","email","useComments","_useCommentsSelector","fieldName","selector","useCommentsSelector","commentsErrors","renderComments","length","Fragment","Comment_Comment","SinglePostPage","App","Navbar_Navbar","react_router","exact","path","component","settingsSlice","getSettings","getSettingsSuccess","getSettingsError","settingsActionCreator","settingsActions","rootReducer","combineReducers","postsReducer","commentsReducer","postReducer","settings","settingsReducer","BASE_URL","MAIN","fetchPosts","_fetchPosts","apply","this","arguments","_callee","response","regenerator_default","wrap","_context","prev","next","fetch","sent","abrupt","json","stop","fetchPost","_x","_fetchPost","_callee2","_context2","fetchComments","_x2","_fetchComments","_callee3","_context3","watchers","call","put","t0","_marked","_marked2","_ref2","finish","_marked3","_context4","takeLeading","type","_marked4","fetchSettings","_fetchSettings","mockSettings","toUIModel","language","events","event","trigger","runInParallel","stepsRunInParallel","actions","steps","step","params","parameters","settingsSaga_marked","settingsSaga_marked2","rootSaga","all","fork","onGetPosts","onGetSettings","sagas_marked","sagaMiddleware","createSagaMiddleware","middleware","getDefaultMiddleware","push","store","configureStore","reducer","run","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.48d38a00.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport const Navbar = () => (\n  <nav>\n    <section>\n      <Link to=\"/\">Dashboard</Link>\n      <Link to=\"/posts\">Posts</Link>\n    </section>\n  </nav>\n)\n","import React from \"react\";\n//import { Link } from \"react-router-dom\";\n\nconst DashboardPage = () => (\n  <section>\n    <h1>About Me !</h1>\n    <h2>Sushmita Paul</h2>\n    <p>\n      I'm a student of Guru Nanak Institute of Technology. Currently I'm working\n      as a full stack intern at HighRadius Corporation.\n    </p>\n    <p>\n      In this poject I have used react, react-hooks, redux-saga and\n      react-router.\n    </p>\n    <p>\n      Let's view some dummy posts. Land on the Posts screen by clicking \"Posts\"\n      from navbar!\n    </p>\n  </section>\n);\n\nexport default DashboardPage;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport const Post = ({ post, excerpt }) => (\n  <article className={excerpt ? \"post-excerpt\" : \"post\"}>\n    <h2>{post.title}</h2>\n    <p>{excerpt ? post.body.substring(0, 100) : post.body}</p>\n\n    {excerpt && (\n      <Link to={`/posts/${post.id}`} className=\"button\">\n        View Post\n      </Link>\n    )}\n  </article>\n);\n","import { get } from \"lodash\";\n\n// POSTS\nexport const selectPosts = (state) => state.posts;\nexport const selectPostsList = (state) => state.posts.list;\nexport const selectPostsLoading = (state) => state.posts.loading;\nexport const selectPostsErrors = (state) => state.posts.errors;\n\n// POST\nexport const selectPost = (state) => state.post;\nexport const selectPostField = (fieldName = \"\") => (state) =>\n  get(state.post, fieldName);\n\n// COMMENTS\n// With a single selector this way we can get any data from\n// the store and also use it as a normal selector\nexport const selectComments = (stateOrFieldName) => {\n  // If field name is provided\n  if (typeof stateOrFieldName === \"string\") {\n    return (state) => {\n      return get(state.comments, stateOrFieldName, state.comments);\n    };\n  }\n  // If state\n  return stateOrFieldName.comments;\n};\n\n// SETTINGS (for demo)\nexport const selectSettings = (state) => state.settings;\nexport const selectSettingsField = (fieldName = \"\") => (state) =>\n  get(state.settings, fieldName);\n","import { createAction } from \"@reduxjs/toolkit\";\n\n/**\n * Creates the appropriate action(s)\n * @param {string} name the name of the slice we are creating the actions for\n * @returns {Function} A function that accepts 3 params:\n * - action (string): name of the action to create\n * - hasSuccess (boolean): true if a Success action must be created too\n * - hasError (boolean): true if an Error action must be created too\n */\nexport const getActionCreator = (name) => (action, hasSuccess, hasError) => {\n  const act = {\n    [action]: createAction(`${name}/${action}`)\n  };\n  if (hasSuccess)\n    act[`${action}Success`] = createAction(`${name}/${action}Success`);\n  if (hasError) act[`${action}Error`] = createAction(`${name}/${action}Error`);\n  return act;\n};\n/**\n * Creates API actions, the normal action and the respective Success and Error to\n * properly handle the API's response\n * @param {string} name the name of the slice we are creating the actions for\n * @returns {Function} A function that accepts 1 param, the action's name\n */\nexport const getApiActionCreator = (name) => (action) =>\n  getActionCreator(name)(action, true, true);\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { getApiActionCreator } from \"./utils/actionCreator\";\n\nexport const initialState = {\n  loading: false,\n  errors: false,\n  list: []\n};\n\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState,\n  reducers: {\n    getPosts: (state) => {\n      state.loading = true;\n    },\n    getPostsSuccess: (state, { payload }) => {\n      state.list = payload;\n      state.loading = false;\n      state.errors = false;\n    },\n    getPostsError: (state) => {\n      state.loading = false;\n      state.errors = true;\n    }\n  }\n});\n\nconst postsActionCreator = getApiActionCreator(\"posts\");\nexport const postsActions = {\n  ...postsActionCreator(\"getPosts\")\n};\nexport default postsSlice.reducer;\n","import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Post } from \"components/Post\";\nimport { usePostsSelector } from \"customHooks/stateSelectors\";\nimport { postsActions } from \"slices/posts\";\n//import { settingsActions } from \"slices/settings\";\n\nconst PostsPage = () => {\n  const dispatch = useDispatch();\n  const { list, loading, errors } = usePostsSelector();\n\n  useEffect(() => {\n    dispatch(postsActions.getPosts());\n  }, []);\n\n  function renderPosts() {\n    if (loading) return <p>Loading posts...</p>;\n    if (errors) return <p>Unable to display posts.</p>;\n\n    return list.map((post) => <Post key={post.id} post={post} excerpt />);\n  }\n\n  return (\n    <section>\n      <h1>Posts</h1>\n      {renderPosts()}\n    </section>\n  );\n};\n\nexport default PostsPage;\n","import { shallowEqual, useSelector } from \"react-redux\";\nimport {\n  selectPostsList,\n  selectPostsLoading,\n  selectPostsErrors,\n  selectPosts,\n  selectPostField\n  //selectSettings\n} from \"sagas/selectors\";\nimport { selectPost } from \"sagas/selectors\";\nimport { selectComments } from \"sagas/selectors\";\n\n// POSTS\n// Can grow unnecessarily large\nexport const usePostsSelector = () => useSelector(selectPosts, shallowEqual);\nexport const usePostsListSelector = () =>\n  useSelector(selectPostsList, shallowEqual);\nexport const usePostsLoadingSelector = () =>\n  useSelector(selectPostsLoading, shallowEqual);\nexport const usePostsErrorsSelector = () =>\n  useSelector(selectPostsErrors, shallowEqual);\n\n// POST\n// Explicit and DRY\nexport const usePostSelector = () => useSelector(selectPost, shallowEqual);\nexport const usePostFieldSelector = (fieldName) =>\n  useSelector(selectPostField(fieldName), shallowEqual);\n\n// COMMENTS\n// DRY and scalable\n\nexport const useCommentsSelector = (fieldName) => {\n  const selector = fieldName ? selectComments(fieldName) : selectComments;\n  return useSelector(selector, shallowEqual);\n};\n\n// SETTINGS\n// For demonstration purposes\n//export const useSettingsSelector = () =>\n// useSelector(selectSettings, shallowEqual);\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { getApiActionCreator } from \"./utils/actionCreator\";\n\nexport const initialState = {\n  loading: false,\n  errors: false,\n  data: {}\n};\n\nconst postSlice = createSlice({\n  name: \"post\",\n  initialState,\n  reducers: {\n    getPost: (state) => {\n      state.loading = true;\n    },\n    getPostSuccess: (state, { payload }) => {\n      state.data = payload;\n      state.loading = false;\n      state.errors = false;\n    },\n    getPostError: (state) => {\n      state.loading = false;\n      state.errors = true;\n    }\n  }\n});\n\nconst postActionCreator = getApiActionCreator(\"post\");\nexport const postActions = {\n  ...postActionCreator(\"getPost\")\n};\nexport default postSlice.reducer;\n","import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { postActions } from \"slices/post\";\nimport { usePostSelector } from \"./stateSelectors\";\nimport { Post } from \"components/Post\";\nimport { isEmpty } from \"lodash\";\n\n/**\n * Gets the data from the store after fetching it to the API\n * @returns {object} { post, postLoading, postErrors, renderPost }\n */\nexport const usePost = () => {\n  const dispatch = useDispatch();\n  const { id: postId = \"\" } = useParams();\n  const {\n    data: post,\n    loading: postLoading,\n    errors: postErrors\n  } = usePostSelector();\n\n  useEffect(() => {\n    dispatch(postActions.getPost(postId));\n  }, [postId]);\n\n  const renderPost = () => {\n    if (postLoading) return <p>Loading post...</p>;\n    if (postErrors) return <p>Unable to display post.</p>;\n    if (isEmpty(post)) return <p>Post Not Found</p>;\n\n    return <Post post={post} />;\n  };\n  return { post, postLoading, postErrors, renderPost };\n};\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { getApiActionCreator } from \"./utils/actionCreator\";\n\nexport const initialState = {\n  errors: false,\n  list: undefined\n};\n\nconst commentsSlice = createSlice({\n  name: \"comments\",\n  initialState,\n  reducers: {\n    getComments: (state) => {\n      state.errors = false;\n      state.list = undefined;\n    },\n    getCommentsSuccess: (state, { payload }) => {\n      state.list = payload;\n    },\n    getCommentsError: (state) => {\n      state.errors = true;\n    }\n  }\n});\n\nconst commentsActionCreator = getApiActionCreator(\"comments\");\nexport const commentsActions = {\n  ...commentsActionCreator(\"getComments\")\n};\nexport default commentsSlice.reducer;\n","import React from 'react'\n\nexport const Comment = ({ comment }) => (\n  <aside className=\"comment\">\n    <h2>{comment.title}</h2>\n    <h3>{comment.email}</h3>\n    <p>{comment.body}</p>\n  </aside>\n)\n","import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { useCommentsSelector } from \"./stateSelectors\";\nimport { commentsActions } from \"slices/comments\";\nimport { Comment } from \"components/Comment\";\n\n/**\n * Gets the data from the store after fetching it to the API\n * @returns {object} { comments, commentsLoading, commentsErrors, renderComments }\n */\nexport const useComments = () => {\n  const dispatch = useDispatch();\n  const { id: postId = \"\" } = useParams();\n  const { list: comments, errors: commentsErrors } = useCommentsSelector();\n\n  useEffect(() => {\n    dispatch(commentsActions.getComments(postId));\n  }, [postId]);\n\n  function renderComments() {\n    if (!comments) return <p>Loading comments...</p>;\n    if (commentsErrors) return <p>Unable to display comments.</p>;\n    if (!comments.length) return <></>;\n\n    return (\n      <>\n        <h2>Comments</h2>\n        {comments.map((comment) => (\n          <Comment key={comment.id} comment={comment} />\n        ))}\n      </>\n    );\n  }\n\n  return { comments, commentsErrors, renderComments };\n};\n","import React from \"react\";\nimport { usePost } from \"customHooks/usePost\";\nimport { useComments } from \"customHooks/useComments\";\n\nconst SinglePostPage = () => {\n  // We split logic into multiple hooks to avoid poluting\n  // the component and follow SoC principle, also having\n  // separate hooks allows to reuse them somewhere else\n  const { renderPost } = usePost();\n  const { renderComments } = useComments();\n\n  return (\n    <section>\n      {renderPost()}\n      {renderComments()}\n    </section>\n  );\n};\n\nexport default SinglePostPage;\n","import React from \"react\";\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\nimport { Navbar } from \"./components/Navbar\";\nimport DashboardPage from \"./pages/DashboardPage\";\nimport PostsPage from \"./pages/PostsPage\";\nimport SinglePostPage from \"./pages/SinglePostPage\";\nconst App = () => {\n  return (\n    <Router>\n      <Navbar />\n      <Switch>\n        {/* If the current URL is /(Dashboard), this route is rendered\n            while the rest are ignored */}\n        <Route exact path=\"/\" component={DashboardPage} />\n        <Route exact path=\"/posts\" component={PostsPage} />\n        <Route exact path=\"/posts/:id\" component={SinglePostPage} />\n        {/* If none of the previous routes render anything,\n            this route acts as a fallback.\n\n            Important: A route with path=\"/\" will *always* match\n            the URL because all URLs begin with a \"/\"\". So that's\n            why we put this one last of all */}\n        <Redirect to=\"/\" />{\" \"}\n        {/* Rendering a <Redirect> will navigate to \n            a new location. The new location will override the current \n            location in the history stack*/}\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","//For demonstration purposes//\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { getApiActionCreator } from \"./utils/actionCreator\";\n\nexport const initialState = {\n  errors: false,\n  data: undefined\n};\n\nconst settingsSlice = createSlice({\n  name: \"settings\",\n  initialState,\n  reducers: {\n    getSettings: (state) => {\n      state.errors = false;\n      state.data = undefined;\n    },\n    getSettingsSuccess: (state, { payload }) => {\n      state.data = payload;\n    },\n    getSettingsError: (state) => {\n      state.errors = true;\n    }\n  }\n});\n\nconst settingsActionCreator = getApiActionCreator(\"settings\");\nexport const settingsActions = {\n  ...settingsActionCreator(\"getSettings\")\n};\nexport default settingsSlice.reducer;\n","import { combineReducers } from \"redux\";\n\nimport postsReducer from \"./posts\";\nimport postReducer from \"./post\";\nimport commentsReducer from \"./comments\";\nimport settingsReducer from \"./settings\";\n\nconst rootReducer = combineReducers({\n  posts: postsReducer,\n  comments: commentsReducer,\n  post: postReducer,\n  settings: settingsReducer\n});\n\nexport default rootReducer;\n","const BASE_URL = {\n  MAIN: \"https://jsonplaceholder.typicode.com\"\n};\n\nexport default BASE_URL;\n","import BASE_URL from \"api/baseUrls.const\";\n\nexport async function fetchPosts() {\n  const response = await fetch(`${BASE_URL.MAIN}/posts`);\n  return response.json();\n}\n\nexport async function fetchPost(id) {\n  const response = await fetch(`${BASE_URL.MAIN}/posts/${id}`);\n  return response.json();\n}\n\nexport async function fetchComments(postId) {\n  const response = await fetch(`${BASE_URL.MAIN}/comments?postId=${postId}`);\n  return response.json();\n}\n","import { call, put, takeLeading } from \"redux-saga/effects\";\nimport { postsActions } from \"slices/posts\";\nimport { postActions } from \"slices/post\";\nimport { fetchPosts, fetchPost, fetchComments } from \"api/postsApi\";\nimport { commentsActions } from \"../slices/comments\";\n\n// ----- WORKERS -------------------------------------------------------\nfunction* getPosts() {\n  try {\n    const posts = yield call(fetchPosts);\n    yield put(postsActions.getPostsSuccess(posts));\n  } catch (err) {\n    yield put(postsActions.getPostsError(err));\n  }\n}\n\nfunction* getPost({ payload: id }) {\n  try {\n    const post = yield call(fetchPost, id);\n    yield put(postActions.getPostSuccess(post));\n  } catch (err) {\n    yield put(postActions.getPostError(err));\n  }\n}\n\nfunction* getComments({ payload: postId }) {\n  try {\n    const comments = yield call(fetchComments, postId);\n    yield put(commentsActions.getCommentsSuccess(comments));\n  } catch (err) {\n    yield put(commentsActions.getCommentsError(err));\n  } finally {\n  }\n}\n// ---------------------------------------------------------------------\n// Watchers\nexport default function* watchers() {\n  yield takeLeading(postsActions.getPosts.type, getPosts);\n  yield takeLeading(postActions.getPost.type, getPost);\n  yield takeLeading(commentsActions.getComments.type, getComments);\n}\n","import mockSettings from \"./mockSettings\";\n\nexport async function fetchSettings() {\n  return mockSettings;\n}\n","// To UI -------------------------------\nexport const eventsToUIModel = (events) => {\n  return events.map((event) => ({\n    id: event.id,\n    name: event.trigger,\n    runInParallel: event.stepsRunInParallel,\n    actions: event.steps.map((step) => ({\n      id: step.action,\n      params: step.parameters\n    }))\n  }));\n};\n\nexport const toUIModel = (data) => ({\n  language: data.language,\n  //...\n  events: eventsToUIModel(data.events)\n});\n\n// To API -------------------------------\nexport const eventsToAPIModel = (events) => {\n  return events.map((event) => ({\n    id: event.id,\n    trigger: event.name,\n    stepsRunInParallel: event.runInParallel,\n    steps: event.actions.map((act) => ({\n      action: act.id,\n      parameters: act.params\n    }))\n  }));\n};\n\nexport const toAPIModel = (data) => ({\n  language: data.language,\n  //...\n  events: eventsToAPIModel(data.events)\n});\n","//For demonstrations//\nimport { call, put, takeLeading } from \"redux-saga/effects\";\nimport { settingsActions } from \"slices/settings\";\nimport { fetchSettings } from \"api/settingsApi\";\nimport { toUIModel } from \"./convert/postSettings\";\n\n// ----- WORKERS -------------------------------------------------------\nfunction* getSettings() {\n  try {\n    const settings = yield call(fetchSettings);\n    yield put(settingsActions.getSettingsSuccess(toUIModel(settings)));\n  } catch (err) {\n    yield put(settingsActions.getSettingsError(err));\n  }\n}\n// -----Watchers---------------------------------------------------------------------\n\nexport default function* watchers() {\n  yield takeLeading(settingsActions.getSettings.type, getSettings);\n}\n","import { all, fork } from \"redux-saga/effects\";\nimport onGetPosts from \"./postsSaga\";\nimport onGetSettings from \"./settingsSaga\";\n\nfunction* rootSaga() {\n  yield all([fork(onGetPosts)]);\n  yield all([fork(onGetSettings)]);\n}\n\nexport default rootSaga;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport { Provider } from \"react-redux\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport App from \"./App\";\nimport rootReducer from \"./slices\";\nimport rootSaga from \"sagas\";\n\nimport \"./index.css\";\n\n// create the saga middleware\nconst sagaMiddleware = createSagaMiddleware();\nconst middleware = getDefaultMiddleware();\nmiddleware.push(sagaMiddleware);\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware\n});\n\n// run the saga\nsagaMiddleware.run(rootSaga);\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}